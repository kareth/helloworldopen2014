#!/usr/bin/env ipython-2.7
# -*- coding: utf-8 -*-

import os
import os.path
from __future__ import division
import gflags
import sys

FLAGS = gflags.FLAGS

gflags.DEFINE_integer('physics', 7, 'number of physics [1,100]. Default 7')
gflags.DEFINE_integer('laps', 10, 'number of laps. Default 10')
gflags.DEFINE_float('answer_time', 5.0, 'max time for decision')

schedulers = (
    "WojtekThrottleScheduler",
#    "BinaryThrottleScheduler",
#    "MagicThrottleScheduler",
)

maps = []
for i in range(0,10):
    maps.append("random" + str(i))

maps += (
    "elaeintarha",
    "pentag",
    "england",
    "france",
    "germany",
    "imola",
    "keimola",
    "suzuka",
    "usa",
)


try:
    argv = FLAGS(sys.argv)  # parse flags
except FLAGS.FlagsError as e:
    print('{}\\nUsage: {} ARGS\\n{}'.format(e, sys.argv[0], FLAGS))
    sys.exit(1)

def avg(x):
    return sum(x)/len(x)

with open(os.path.join('results',"results.csv"), "w") as f:
    f.write('scheduler,map,physics,best_lap,total_ticks,total_dist,max_tick_time,avg_tick_time,crash\n')
    for scheduler in schedulers:
        lines = []
        for map in maps:
            for physic in range(0, FLAGS.physics):
                answer_time = int(FLAGS.answer_time * 1000)
                #res = !bin/throttle_tester --throttle_scheduler=$scheduler --track=$map --physics=$physic --answer_time=$answer_time --laps=$FLAGS.laps --log_wojtek_to_file
                res = !bin/throttle_tester --track=$map --physics=$physic --answer_time=$answer_time --laps=$FLAGS.laps
                name_out = os.path.join('results', map + "-" + str(physic) + ".out")
                with open(name_out, 'w') as x:
                    x.write("\n".join(res))
                name = os.path.join('results', scheduler + "-" + map + "-" + str(physic) + ".csv")
                !mv data.csv $name 2>/dev/null

                if scheduler == 'WojtekThrottleScheduler':
                    name = os.path.join('results', "wojtek-" + map + "-" + str(physic) + ".csv")
                    !mv wojtek_data_log.csv $name 2>/dev/null

                crash = "CRASHED" in res[-1]
                if crash:
                    res = res[:-1]

                line = ",".join([line.split(':')[1].replace('ms','').strip() for line in res[-5:]])

                line = ','.join([scheduler, map, str(physic), line, str(crash)])
                lines.append(line)
                print(line)
                f.write(line + '\n')

        print()
        print('summary for {}'.format(scheduler))
        print('total_avg_ticks_per_lap = {}'.format(sum(float(line.split(',')[4])/FLAGS.laps for line in lines)))
        print('max_tick_time           = {}'.format(max([float(line.split(',')[6]) for line in lines])))
        print('avg_tick_time           = {}'.format(avg([float(line.split(',')[7]) for line in lines])))
        print('number of crashes       = {}'.format(sum([line.split(',')[8] == 'True' for line in lines])))
        print()
        
